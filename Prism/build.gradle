import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "xyz.jpenilla.run-paper" version "1.0.6"
}

apply plugin: 'java'

repositories {
    mavenLocal()
    mavenCentral()

    // Paper
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }

    // Spigot
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }

    // WorldEdit
    maven { url = 'https://maven.enginehub.org/repo/' }

    // PasteGG
    maven { url = 'https://maven.addstar.com.au/artifactory/all-snapshot' }

    // Adventure snapshot
    maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }

    // NBTAPI
    maven { url = 'https://repo.codemc.org/repository/maven-public/' }
}

group = project.property("group")
version = project.property("version")
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

processResources {
    filter ReplaceTokens, tokens: [
            "apiversion": project.property("apiversion"),
            "version"   : project.property("version"),
            "versionId"   : project.property("versionId")
    ]
}

dependencies {
    compileOnly('dev.folia:folia-api:1.20.2-R0.1-SNAPSHOT') {
        // Allows Java 1.8
        targetConfiguration = "compile"
    }
    compileOnly 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot:1.20.4-R0.1-SNAPSHOT:remapped-mojang' // We actually don't use it in project, all reflect

    compileOnly('com.sk89q.worldedit:worldedit-bukkit:7.2.0-SNAPSHOT') {
        exclude group: 'org.spigotmc', module: 'spigot-api'
    }
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'io.papermc:paperlib:1.0.3'
    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'net.kyori:adventure-api:4.15.0'
//    implementation 'net.kyori:adventure-platform-bukkit:4.3.1' // Not for 1.20.3/4
    implementation 'net.kyori:adventure-platform-bukkit:4.3.2-SNAPSHOT'
    implementation 'net.kyori:adventure-text-serializer-plain:4.15.0'
    implementation 'org.kitteh:paste-gg-api:1.0.0-SNAPSHOT'
    implementation 'de.tr7zw:item-nbt-api:2.12.2'
    implementation 'org.bstats:bstats-bukkit:3.0.0'
    implementation project(':Prism-Api')
}

jar {
    actions = []
    dependsOn = []
    dependsOn('shadowJar')
}

shadowJar {
    String fileName = "Prism-" + project.version + ".jar"
    archiveFileName.set(fileName)
    dependencies {
        exclude(dependency('org.checkerframework:.*'))
        exclude(dependency('org.slf4j:.*'))
        exclude(dependency('org.intellij:.*'))
        exclude(dependency('org.jetbrains:.*'))
        exclude(dependency('com.google.code.gson:.*'))
    }

    relocate 'io.papermc.lib', 'network.darkhelmet.prism.paperlib'
    relocate 'com.zaxxer', 'network.darkhelmet.prism.zaxxer'
    relocate 'net.kyori', 'network.darkhelmet.prism.kyori'
    relocate 'org.kitteh', 'network.darkhelmet.prism.kitteh'
    relocate 'org.apache', 'network.darkhelmet.prism.apache'
    relocate 'de.tr7zw.changeme.nbtapi', 'network.darkhelmet.prism.de.tr7zw.nbtapi'
    relocate 'org.bstats', 'io.github.rothes.prismcn.lib.org.bstats'

    minimize()
}

runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion("1.19.2")
}

gradle.buildFinished {
    // Clean Gradle resources cache
    deleteDirectory(new File(project.buildDir, "resources/"))
}

boolean deleteDirectory(File directory) {
    File[] contents = directory.listFiles();
    if (contents != null) {
        for (File file : contents) {
            deleteDirectory(file);
        }
    }
    return directory.delete();
}
